// <auto-generated />
using System;
using Alderto.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Alderto.Data.Migrations
{
    [DbContext(typeof(AldertoDbContext))]
    partial class AldertoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Alderto.Data.Models.CustomCommand", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("TriggerKeyword")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("LuaCode")
                        .IsRequired()
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.HasKey("GuildId", "TriggerKeyword");

                    b.ToTable("CustomCommands");
                });

            modelBuilder.Entity("Alderto.Data.Models.Guild", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset?>("PremiumUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("Alderto.Data.Models.GuildBank.GuildBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("LogChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("ModeratorRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("GuildId", "Name")
                        .IsUnique();

                    b.ToTable("GuildBanks");
                });

            modelBuilder.Entity("Alderto.Data.Models.GuildBank.GuildBankItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(280)")
                        .HasMaxLength(280);

                    b.Property<int>("GuildBankId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("character varying(140)")
                        .HasMaxLength(140);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("GuildBankId");

                    b.ToTable("GuildBankItems");
                });

            modelBuilder.Entity("Alderto.Data.Models.GuildConfiguration", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("AcceptedMemberRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("CurrencySymbol")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int>("TimelyCooldown")
                        .HasColumnType("integer");

                    b.Property<int>("TimelyRewardQuantity")
                        .HasColumnType("integer");

                    b.HasKey("GuildId");

                    b.ToTable("GuildPreferences");
                });

            modelBuilder.Entity("Alderto.Data.Models.GuildManagedMessage", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Content")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("ModeratorRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("GuildId", "MessageId");

                    b.ToTable("GuildManagedMessages");
                });

            modelBuilder.Entity("Alderto.Data.Models.GuildMember", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("MemberId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("CurrencyCount")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CurrencyLastClaimed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nickname")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<decimal?>("RecruiterMemberId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("GuildId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("GuildMembers");
                });

            modelBuilder.Entity("Alderto.Data.Models.Member", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Discriminator")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Username")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Alderto.Data.Models.CustomCommand", b =>
                {
                    b.HasOne("Alderto.Data.Models.Guild", "Guild")
                        .WithMany("CustomCommands")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alderto.Data.Models.GuildBank.GuildBank", b =>
                {
                    b.HasOne("Alderto.Data.Models.Guild", "Guild")
                        .WithMany("GuildBanks")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alderto.Data.Models.GuildBank.GuildBankItem", b =>
                {
                    b.HasOne("Alderto.Data.Models.GuildBank.GuildBank", "GuildBank")
                        .WithMany("Contents")
                        .HasForeignKey("GuildBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alderto.Data.Models.GuildConfiguration", b =>
                {
                    b.HasOne("Alderto.Data.Models.Guild", "Guild")
                        .WithOne("Configuration")
                        .HasForeignKey("Alderto.Data.Models.GuildConfiguration", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alderto.Data.Models.GuildManagedMessage", b =>
                {
                    b.HasOne("Alderto.Data.Models.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alderto.Data.Models.GuildMember", b =>
                {
                    b.HasOne("Alderto.Data.Models.Guild", "Guild")
                        .WithMany("GuildMembers")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alderto.Data.Models.Member", "Member")
                        .WithMany("GuildMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
